# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-06-18 18:23
from __future__ import unicode_literals

import autoslug.fields
import colorful.fields
from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import suggest.models
import taggit_autosuggest.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='CommentFlag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flag_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('flag_type', models.CharField(choices=[('RM', 'REMOVE FLAG'), ('IR', 'IRRELEVANT'), ('AB', 'ABUSIVE'), ('RP', 'REPEATED'), ('PR', 'PROMOTION'), ('SP', 'SPAM')], default='IR', max_length=100)),
                ('commentflagcolor', colorful.fields.RGBColorField(default=suggest.models.getHexColor)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CommentVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('up_vote', models.NullBooleanField()),
                ('first_voted', models.DateTimeField(auto_now_add=True)),
                ('last_changed', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PostFlag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flag_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('flag_type', models.CharField(choices=[('RM', 'REMOVE FLAG'), ('IR', 'IRRELEVANT'), ('AB', 'ABUSIVE'), ('RP', 'REPEATED'), ('PR', 'PROMOTION'), ('SP', 'SPAM')], default='IR', max_length=100)),
                ('postflagcolor', colorful.fields.RGBColorField(default=suggest.models.getHexColor)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReplyFlag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flag_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('flag_type', models.CharField(choices=[('RM', 'REMOVE FLAG'), ('IR', 'IRRELEVANT'), ('AB', 'ABUSIVE'), ('RP', 'REPEATED'), ('PR', 'PROMOTION'), ('SP', 'SPAM')], default='IR', max_length=100)),
                ('replyflagcolor', colorful.fields.RGBColorField(default=suggest.models.getHexColor)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pub_date', models.DateTimeField(auto_now_add=True)),
                ('is_flagged', models.BooleanField(default=False)),
                ('last_updated_date', models.DateTimeField(auto_now_add=True)),
                ('posted_anonymously', models.BooleanField(default=False, verbose_name='Anonymous')),
                ('text', models.TextField(verbose_name='Description')),
                ('is_published', models.BooleanField(default=True)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='text', unique=True)),
                ('vote_count', models.IntegerField(blank=True, default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pub_date', models.DateTimeField(auto_now_add=True)),
                ('is_flagged', models.BooleanField(default=False)),
                ('last_updated_date', models.DateTimeField(auto_now_add=True)),
                ('posted_anonymously', models.BooleanField(default=False, verbose_name='Anonymous')),
                ('text', models.TextField(verbose_name='Description')),
                ('is_published', models.BooleanField(default=True)),
                ('post_title', models.CharField(max_length=250, verbose_name='Title')),
                ('post_type', models.CharField(choices=[('re', 'request'), ('su', 'suggestion'), ('u', 'url')], default='re', max_length=100, verbose_name='Post Category')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='post_title', unique=True)),
                ('is_closed', models.BooleanField(default=False)),
                ('closed_date', models.DateTimeField(null=True)),
                ('num_of_views', models.IntegerField(blank=True, default=0)),
                ('vote_count', models.IntegerField(blank=True, default=0)),
                ('tags', taggit_autosuggest.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('likes', models.IntegerField(default=0)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to=suggest.models.get_image_path)),
                ('imagecolor', colorful.fields.RGBColorField(default=suggest.models.getHexColor)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserReply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pub_date', models.DateTimeField(auto_now_add=True)),
                ('is_flagged', models.BooleanField(default=False)),
                ('last_updated_date', models.DateTimeField(auto_now_add=True)),
                ('posted_anonymously', models.BooleanField(default=False, verbose_name='Anonymous')),
                ('text', models.TextField(verbose_name='Description')),
                ('is_published', models.BooleanField(default=True)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='text', unique=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='suggest.UserComment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='suggest.UserProfile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserView',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('view_count', models.IntegerField(default=0)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('time_of_recent_view', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='suggest.UserPost')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='suggest.UserProfile')),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('up_vote', models.NullBooleanField()),
                ('first_voted', models.DateTimeField(auto_now_add=True)),
                ('last_changed', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='suggest.UserPost')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='suggest.UserProfile')),
            ],
        ),
        migrations.AddField(
            model_name='userpost',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='suggest.UserProfile'),
        ),
        migrations.AddField(
            model_name='usercomment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='suggest.UserPost'),
        ),
        migrations.AddField(
            model_name='usercomment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='suggest.UserProfile'),
        ),
        migrations.AddField(
            model_name='replyflag',
            name='reply',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='suggest.UserReply'),
        ),
        migrations.AddField(
            model_name='replyflag',
            name='user_who_flagged',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='suggest.UserProfile'),
        ),
        migrations.AddField(
            model_name='postflag',
            name='post',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='suggest.UserPost'),
        ),
        migrations.AddField(
            model_name='postflag',
            name='user_who_flagged',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='suggest.UserProfile'),
        ),
        migrations.AddField(
            model_name='commentvote',
            name='comment',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='suggest.UserComment'),
        ),
        migrations.AddField(
            model_name='commentvote',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='suggest.UserProfile'),
        ),
        migrations.AddField(
            model_name='commentflag',
            name='comment',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='suggest.UserComment'),
        ),
        migrations.AddField(
            model_name='commentflag',
            name='user_who_flagged',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='suggest.UserProfile'),
        ),
        migrations.AlterUniqueTogether(
            name='vote',
            unique_together=set([('user', 'post')]),
        ),
        migrations.AlterUniqueTogether(
            name='userview',
            unique_together=set([('post', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='commentvote',
            unique_together=set([('user', 'comment')]),
        ),
    ]
